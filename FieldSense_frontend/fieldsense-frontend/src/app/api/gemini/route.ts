import { NextResponse } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';

// You can optionally export runtime = 'edge' if the SDK fully supports edge.
// export const runtime = 'nodejs';

interface GeminiRequestBody {
  question?: string;
  language: 'hindi' | 'english';
  image?: { data: string; mimeType: string } | null;
}

const buildPrompt = (language: 'hindi' | 'english', question?: string, isImage?: boolean) => {
  const structureHindi = `рдЙрддреНрддрд░ рдХрд╛ рдврд╛рдВрдЪрд╛:\n- рд╕рдВрдХреНрд╖рд┐рдкреНрдд рд╕рд╛рд░рд╛рдВрд╢ (1 рдкрдВрдХреНрддрд┐)\n- рдлрд╕рд▓ / рд╕реНрдерд┐рддрд┐ рдкрд╣рдЪрд╛рди\n- рд╕рдВрднрд╛рд╡рд┐рдд рд╕рдорд╕реНрдпрд╛рдПрдВ / рдХрд╛рд░рдг\n- рддрддреНрдХрд╛рд▓ рдХрджрдо (рдмреБрд▓реЗрдЯ)\n- рдкреЛрд╖рдХ рддрддреНрд╡ / рдЦрд╛рдж рд╕реБрдЭрд╛рд╡\n- рдкрд╛рдиреА рдкреНрд░рдмрдВрдзрди\n- рд░реЛрдХрдерд╛рдо / рдЕрдЧрд▓реЗ рдХрджрдо\n\nрдЬрд╣рд╛рдБ рд╕рдВрднрд╡ рд╣реЛ рдорд╛рддреНрд░рд╛ / рд╕рдордпрд╛рд╡рдзрд┐ рдмрддрд╛рдПрдВред`;
  const structureEnglish = `Answer structure:\n- One-line summary\n- Crop / condition identification\n- Possible issues / causes\n- Immediate actionable steps (bullets)\n- Nutrient / fertilizer recommendation\n- Water management\n- Prevention / next steps\nProvide quantities / timing where possible.`;

  if (isImage) {
    return language === 'hindi'
      ? `рдЖрдк рдПрдХ рдЕрдиреБрднрд╡реА рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣рдХрд╛рд░ рд╣реИрдВред рдиреАрдЪреЗ рджреА рдЧрдИ рдлрд╕рд▓ рдХреА рдлреЛрдЯреЛ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВред ${structureHindi}`
      : `You are an experienced agronomy advisor. Analyze the crop photo. ${structureEnglish}`;
  }

  return language === 'hindi'
    ? `рдЖрдк рдПрдХ рдЕрдиреБрднрд╡реА рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣рдХрд╛рд░ рд╣реИрдВред рдХрд┐рд╕рд╛рди рдиреЗ рдкреВрдЫрд╛ рд╣реИ: "${question}"\n${structureHindi}`
    : `You are an experienced agronomy advisor. Farmer asked: "${question}"\n${structureEnglish}`;
};

export async function POST(req: Request) {
  const apiKey = process.env.GEMINI_API_KEY || process.env.NEXT_PUBLIC_GEMINI_API_KEY; // fallback if already set
  if (!apiKey) {
    return NextResponse.json({
      error: 'Gemini API key missing. Set GEMINI_API_KEY in .env.local (server-side only).'
    }, { status: 500 });
  }

  let body: GeminiRequestBody;
  try {
    body = await req.json();
  } catch (e) {
    return NextResponse.json({ error: 'Invalid JSON body' }, { status: 400 });
  }

  const { question, language, image } = body;
  if (!language) {
    return NextResponse.json({ error: 'language is required' }, { status: 400 });
  }
  if (!image && !question) {
    return NextResponse.json({ error: 'question is required when image is not provided' }, { status: 400 });
  }

  // Handle simple greetings with a handcrafted rich response (avoids wasting model quota)
  if (!image && question && /^(hi|hello|hey|namaste|рдирдорд╕реНрддреЗ)$/i.test(question.trim())) {
    if (language === 'hindi') {
      return NextResponse.json({
        text: `ЁЯМ╛ рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ Krishi рд╕рд╣рд╛рдпрдХ рд╣реВрдБред рдЖрдк рдЗрди рд╡рд┐рд╖рдпреЛрдВ рдкрд░ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВ:\n\nтАв рдлрд╕рд▓ рдХреА рдмреАрдорд╛рд░реА рдкрд╣рдЪрд╛рди\nтАв рдЙрд░реНрд╡рд░рдХ / NPK / рд╕реВрдХреНрд╖реНрдо рдкреЛрд╖рдХ рддрддреНрд╡ рдХреА рдЬрд░реВрд░рдд\nтАв рдорд┐рдЯреНрдЯреА рдХреА рдЙрд░реНрд╡рд░рддрд╛ рдмрдврд╝рд╛рдиреЗ рдХреЗ рддрд░реАрдХреЗ\nтАв рд╕рд┐рдВрдЪрд╛рдИ рдХрд╛ рд╕рд╣реА рд╕рдордп рдФрд░ рдорд╛рддреНрд░рд╛\nтАв рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг (рдЬреИрд╡рд┐рдХ рд╡ рд░рд╛рд╕рд╛рдпрдирд┐рдХ)\nтАв рдореМрд╕рдо рдЖрдзрд╛рд░рд┐рдд рд╕рд▓рд╛рд╣\n\nрдЙрджрд╛рд╣рд░рдг рд▓рд┐рдЦреЗрдВ: "рдЧреЗрдВрд╣реВ рдореЗрдВ рдкрддреНрддрд┐рдпрд╛рдБ рдкреАрд▓реА рд╣реЛ рд░рд╣реА рд╣реИрдВ рдХреНрдпрд╛ рдХрд░реЗрдВ" рдпрд╛ "рдзрд╛рди рдореЗрдВ рдкрд╛рдиреА рдХрдм рдмрджрд▓реЗрдВ"`,
        model: 'manual-response'
      });
    }
    return NextResponse.json({
      text: `ЁЯМ╛ Hello! I'm your farm advisor. You can ask about:\n\nтАв Disease or pest identification\nтАв Fertilizer / NPK / micronutrient schedules\nтАв Improving soil health\nтАв Accurate irrigation timing & amount\nтАв Organic vs chemical pest control\nтАв Weather-based planning\n\nTry asking: "Leaves turning yellow in wheat" or "Best irrigation schedule for rice seedling stage"`,
      model: 'manual-response'
    });
  }

  try {
    const genAI = new GoogleGenerativeAI(apiKey);
    // Prefer faster model first; can extend list if needed
    const modelCandidates = ['gemini-1.5-flash', 'gemini-1.5-flash-latest', 'gemini-1.5-pro'];
    let lastErr: any = null;
    for (const name of modelCandidates) {
      try {
        const model = genAI.getGenerativeModel({
          model: name,
          generationConfig: {
            temperature: 0.7,
            topP: 0.9,
            topK: 40,
            maxOutputTokens: 768
          }
        });
        const prompt = buildPrompt(language, question, Boolean(image));
        const parts: any[] = [{ text: prompt }];
        if (image) {
          parts.push({ inlineData: { mimeType: image.mimeType, data: image.data } });
        }
        const result = await model.generateContent(parts);
        const text = result.response.text();
        // If model responded too tersely, append a gentle elaboration request once.
        let finalText = text;
        if (text && text.trim().split(/\s+/).length < 6 && !image && question) {
          finalText = `${text.trim()}\n\n(Add specifics on: nutrient needs, irrigation, and monitoring signs.)`;
        }
        return NextResponse.json({ text: finalText, model: name });
      } catch (err) {
        lastErr = err;
        // try next model
      }
    }
    if (lastErr) {
      const msg = (lastErr as any)?.message || 'Unknown Gemini API error';
      const apiInvalid = /API key not valid|API_KEY_INVALID/i.test(msg);
      return NextResponse.json({
        error: apiInvalid ? 'Invalid Gemini API key. Regenerate at Google AI Studio.' : msg,
        code: apiInvalid ? 'API_KEY_INVALID' : 'GENERIC_ERROR'
      }, { status: 400 });
    }
    return NextResponse.json({ error: 'Unable to generate content' }, { status: 500 });
  } catch (err: any) {
    const msg = err?.message || 'Unexpected server error';
    return NextResponse.json({ error: msg }, { status: 500 });
  }
}
