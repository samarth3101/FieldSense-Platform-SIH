import { ReportData } from '../types';

class ReportService {
  private baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';

  async generateReport(locationData: any, farmerData: any, language: string = 'hi'): Promise<ReportData> {
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));

      const reportId = `RPT-${Date.now()}`;
      const timestamp = new Date().toLocaleString(language === 'hi' ? 'hi-IN' : 'en-IN');
      
      return {
        id: reportId,
        timestamp: timestamp,
        farmer: farmerData || {
          name: language === 'hi' ? '‡§∞‡§æ‡§ï‡•á‡§∂ ‡§∂‡§∞‡•ç‡§Æ‡§æ' : 'Rakesh Sharma',
          farmerID: 'MH-PN-2023-001247',
          phone: '+91 98765 43210',
          village: language === 'hi' ? '‡§ñ‡§∞‡§æ‡§°‡•Ä ‡§ó‡§æ‡§Å‡§µ' : 'Kharadi Village',
          state: language === 'hi' ? '‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞' : 'Maharashtra'
        },
        location: locationData,
        cropHealth: Math.floor(Math.random() * 20) + 75, // 75-95
        soilCondition: language === 'hi' ? '‡§Ö‡§ö‡•ç‡§õ‡•Ä' : 'Good',
        pestRisk: language === 'hi' ? '‡§ï‡§Æ' : 'Low',
        recommendations: language === 'hi' ? [
          '‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§® ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§ï‡•Ä ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ ‡§¨‡§¢‡§º‡§æ‡§è‡§Ç',
          '‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§Æ‡•á‡§Ç ‡§¶‡•ã ‡§¨‡§æ‡§∞ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç',
          '‡§ï‡•Ä‡§ü‡§®‡§æ‡§∂‡§ï ‡§ï‡§æ ‡§õ‡§ø‡§°‡§º‡§ï‡§æ‡§µ ‡§ï‡§∞‡•á‡§Ç',
          '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§®‡§Æ‡•Ä ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç'
        ] : [
          'Increase nitrogen fertilizer application',
          'Irrigate twice weekly',
          'Apply pesticide spray',
          'Maintain soil moisture levels'
        ],
        yieldPrediction: parseFloat((Math.random() * 2 + 3).toFixed(1)), // 3.0-5.0
        soilMoisture: Math.floor(Math.random() * 30) + 60, // 60-90
        npkLevels: { 
          n: Math.floor(Math.random() * 30) + 60, 
          p: Math.floor(Math.random() * 30) + 55, 
          k: Math.floor(Math.random() * 30) + 65 
        },
        diseaseRisk: language === 'hi' ? '‡§ï‡§Æ' : 'Low',
        irrigationSchedule: language === 'hi' ? [
          '‡§∏‡•ã‡§Æ‡§µ‡§æ‡§∞ ‡§∏‡•Å‡§¨‡§π 6:00 ‡§¨‡§ú‡•á',
          '‡§¨‡•Å‡§ß‡§µ‡§æ‡§∞ ‡§∂‡§æ‡§Æ 5:00 ‡§¨‡§ú‡•á',
          '‡§∂‡•Å‡§ï‡•ç‡§∞‡§µ‡§æ‡§∞ ‡§∏‡•Å‡§¨‡§π 6:00 ‡§¨‡§ú‡•á'
        ] : [
          'Monday 6:00 AM',
          'Wednesday 5:00 PM', 
          'Friday 6:00 AM'
        ]
      };
    } catch (error) {
      console.error('Report generation error:', error);
      throw error;
    }
  }

  async downloadReport(reportData: ReportData, imageData: any = null, language: string = 'hi'): Promise<void> {
    try {
      // Create downloadable content
      const content = this.generateReportText(reportData, language);
      const blob = new Blob([content], { type: 'text/plain' });
      const url = window.URL.createObjectURL(blob);
      
      const link = document.createElement('a');
      link.href = url;
      link.download = `FieldSense_Report_${reportData.id}.txt`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
      
      console.log('üì• Report downloaded successfully');
    } catch (error) {
      console.error('Download error:', error);
      throw error;
    }
  }

  private generateReportText(reportData: ReportData, language: string): string {
    const header = language === 'hi' ? '‡§´‡•Ä‡§≤‡•ç‡§°‡§∏‡•á‡§Ç‡§∏ ‡§è‡§Ü‡§à ‡§´‡§∏‡§≤ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü' : 'FieldSense AI Crop Analysis Report';
    const separator = '='.repeat(50);
    
    return `${header}
${separator}
${language === 'hi' ? '‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ID' : 'Report ID'}: ${reportData.id}
${language === 'hi' ? '‡§§‡§ø‡§•‡§ø' : 'Date'}: ${reportData.timestamp}

${language === 'hi' ? '‡§ï‡§ø‡§∏‡§æ‡§® ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä' : 'Farmer Information'}:
${language === 'hi' ? '‡§®‡§æ‡§Æ' : 'Name'}: ${reportData.farmer.name}
${language === 'hi' ? '‡§ï‡§ø‡§∏‡§æ‡§® ID' : 'Farmer ID'}: ${reportData.farmer.farmerID}
${language === 'hi' ? '‡§´‡•ã‡§®' : 'Phone'}: ${reportData.farmer.phone}

${language === 'hi' ? '‡§∏‡•ç‡§•‡§æ‡§® ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä' : 'Location Information'}:
${language === 'hi' ? '‡§Ö‡§ï‡•ç‡§∑‡§æ‡§Ç‡§∂' : 'Latitude'}: ${reportData.location.lat}
${language === 'hi' ? '‡§¶‡•á‡§∂‡§æ‡§Ç‡§§‡§∞' : 'Longitude'}: ${reportData.location.long}
${language === 'hi' ? '‡§∂‡§π‡§∞' : 'City'}: ${reportData.location.city}
${language === 'hi' ? '‡§∞‡§æ‡§ú‡•ç‡§Ø' : 'State'}: ${reportData.location.state}

${language === 'hi' ? '‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ' : 'Analysis Results'}:
${language === 'hi' ? '‡§´‡§∏‡§≤ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø' : 'Crop Health'}: ${reportData.cropHealth}/100
${language === 'hi' ? '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§®‡§Æ‡•Ä' : 'Soil Moisture'}: ${reportData.soilMoisture}%
${language === 'hi' ? '‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§®' : 'Yield Prediction'}: ${reportData.yieldPrediction} ${language === 'hi' ? '‡§ü‡§®/‡§è‡§ï‡§°‡§º' : 'ton/acre'}

${language === 'hi' ? '‡§™‡•ã‡§∑‡§ï ‡§§‡§§‡•ç‡§µ ‡§∏‡•ç‡§§‡§∞' : 'Nutrient Levels'}:
${language === 'hi' ? '‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§® (N)' : 'Nitrogen (N)'}: ${reportData.npkLevels.n}%
${language === 'hi' ? '‡§´‡•â‡§∏‡•ç‡§´‡•ã‡§∞‡§∏ (P)' : 'Phosphorus (P)'}: ${reportData.npkLevels.p}%
${language === 'hi' ? '‡§™‡•ã‡§ü‡•á‡§∂‡§ø‡§Ø‡§Æ (K)' : 'Potassium (K)'}: ${reportData.npkLevels.k}%

${language === 'hi' ? '‡§∏‡•Å‡§ù‡§æ‡§µ' : 'Recommendations'}:
${reportData.recommendations.map((rec, i) => `${i + 1}. ${rec}`).join('\n')}

${language === 'hi' ? '‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§Ö‡§®‡•Å‡§∏‡•Ç‡§ö‡•Ä' : 'Irrigation Schedule'}:
${reportData.irrigationSchedule.map((schedule, i) => `${i + 1}. ${schedule}`).join('\n')}

${separator}
${language === 'hi' ? '‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡•Ä ‡§ó‡§à: ‡§´‡•Ä‡§≤‡•ç‡§°‡§∏‡•á‡§Ç‡§∏ ‡§è‡§Ü‡§à ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ' : 'Report Generated by: FieldSense AI'}`;
  }
}

export const reportService = new ReportService();
